@page
@model IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetTokens(HttpContext).RequestToken" />

@{
    ViewData["Title"] = "Group Dashboard";
}

<h2>Group Dashboard – @Model.Group.Name</h2>



<div class="mb-3">
    <label>Share link:</label>
    <input type="text" class="form-control" value="@Model.ShareLink" readonly id="shareLink" />
    <button class="btn btn-sm btn-outline-primary mt-1" onclick="copyLink()">Copy</button>
    <!-- Only one button, JS handles everything -->
    <button type="button" class="btn btn-sm btn-warning mt-2" onclick="regenerateLink()">Regenerate Link</button>
</div>





<hr />

<h2>Confirmed Participants</h2>
<ul id="confirmed-list">
    @foreach (var p in Model.ConfirmedParticipants)
    {
        <li id="participant-@p.Id">@p.Name (@p.Email)</li>
    }
</ul>

<h2>Pending Participants</h2>
<ul id="pending-list">
    @foreach (var p in Model.PendingParticipants)
    {
        <li id="participant-@p.Id">
            @p.Name (@p.Email)
            <span class="action-buttons">
                <button onclick="confirmParticipant('@p.Id')">Confirm</button>
                <button onclick="denyParticipant('@p.Id')">Deny</button>
            </span>
        </li>
    }
</ul>

@section Scripts {
    <script>
        function copyLink() {
            const link = document.getElementById("shareLink");
            link.select();
            link.setSelectionRange(0, 99999); // for mobile
            navigator.clipboard.writeText(link.value).then(() => {
                alert("Link copied to clipboard!");
            });
        }
    </script>
    <script>
    async function confirmParticipant(id) {
        const response = await fetch('@Url.Page("/Dashboard/Index", "Confirm")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': 
                    document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ participantId: id })
        });
    
        if (response.ok) {
            const participantElement = document.getElementById(`participant-${id}`);

            // Remove the old buttons
            const buttons = participantElement.querySelector(".action-buttons");
            if (buttons) buttons.remove();

            // Move participant to confirmed list
            document.getElementById("confirmed-list").appendChild(participantElement);
            
        }
    }
    
    async function denyParticipant(id) {
        const response = await fetch('@Url.Page("/Dashboard/Index", "Deny")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': 
                    document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ participantId: id })
        });
    
        if (response.ok) {
            const li = document.getElementById("participant-" + id);
            li.remove();
        }
            }
    </script>
    <script>
async function regenerateLink() {
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const response = await fetch('@Url.Page("/Dashboard/Index", "RegenerateLink")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
        },
    });

    if (response.ok) {
        const result = await response.json();
        document.getElementById("shareLink").value = result.shareLink;
        alert(result.message);
    } else {
        alert("Failed to regenerate link.");
    }
        }
</script>
}

