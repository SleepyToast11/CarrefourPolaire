// <auto-generated />
using System;
using CarrefourPolaire.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarrefourPolaire.Migrations
{
    [DbContext(typeof(EventContext))]
    partial class EventContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarrefourPolaire.Models.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.EmailLoginToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("EmailLoginTokens", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.GroupInviteToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupInviteTokens", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("GroupConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RegistrationGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationGroupId");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.RegistrationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("RegistrationGroups", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegistrationGroupId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<int[]>("UserRoles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RegistrationGroupId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ParticipantAllergy", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AllergyId")
                        .HasColumnType("uuid");

                    b.HasKey("ParticipantId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("ParticipantAllergy", (string)null);
                });

            modelBuilder.Entity("CarrefourPolaire.Models.EmailLoginToken", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.RegistrationGroup", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("CarrefourPolaire.Models.EmailVerificationToken", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.RegistrationGroup", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarrefourPolaire.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarrefourPolaire.Models.GroupInviteToken", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.RegistrationGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CarrefourPolaire.Models.Participant", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.RegistrationGroup", "RegistrationGroup")
                        .WithMany("Participants")
                        .HasForeignKey("RegistrationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationGroup");
                });

            modelBuilder.Entity("CarrefourPolaire.Models.User", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("CarrefourPolaire.Models.RegistrationGroup", "RegistrationGroup")
                        .WithMany()
                        .HasForeignKey("RegistrationGroupId");

                    b.Navigation("Participant");

                    b.Navigation("RegistrationGroup");
                });

            modelBuilder.Entity("ParticipantAllergy", b =>
                {
                    b.HasOne("CarrefourPolaire.Models.Allergy", null)
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarrefourPolaire.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarrefourPolaire.Models.RegistrationGroup", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
